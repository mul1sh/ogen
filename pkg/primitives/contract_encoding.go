// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Contract object
func (c *Contract) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Contract object to a target array
func (c *Contract) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'PublicKey'
	dst = append(dst, c.PublicKey[:]...)

	// Field (1) 'ByteCode'
	dst = append(dst, c.ByteCode[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Contract object
func (c *Contract) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 24048 {
		return ssz.ErrSize
	}

	// Field (0) 'PublicKey'
	copy(c.PublicKey[:], buf[0:48])

	// Field (1) 'ByteCode'
	copy(c.ByteCode[:], buf[48:24048])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Contract object
func (c *Contract) SizeSSZ() (size int) {
	size = 24048
	return
}

// HashTreeRoot ssz hashes the Contract object
func (c *Contract) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Contract object with a hasher
func (c *Contract) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'PublicKey'
	hh.PutBytes(c.PublicKey[:])

	// Field (1) 'ByteCode'
	hh.PutBytes(c.ByteCode[:])

	hh.Merkleize(indx)
	return
}
